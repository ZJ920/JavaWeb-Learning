<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->

<mapper namespace="mapper.BrandMapper">

    <!--
        数据库表的字段名称  和  实体类的属性名称 不一样，则不能自动封装数据
            * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                * 缺点：每次查询都要定义一次别名
                    * sql片段
                        * 缺点：不灵活
            * resultMap：
                1. 定义<resultMap>标签
                2. 在<select>标签中，使用resultMap属性替换 resultType属性

    -->
    <!--
        id：唯一标识
        type：映射的类型，支持别名
    -->
    <resultMap id="brandResultMap" type="pojo.Brand">
        <!--
            id：完成主键字段的映射
                column：表的列名
                property：实体类的属性名
            result：完成一般字段的映射
                column：表的列名
                property：实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <!-- resultMap="brandResultMap" -->

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


    <!--
        * 参数占位符：
            1. #{}:会将其替换为 ?，为了防止SQL注入
            2. ${}：拼sql。会存在SQL注入问题
            3. 使用时机：
                * 参数传递的时候：#{}
                * 表名或者列名不固定的情况下：${} 会存在SQL注入问题

         * 参数类型：parameterType：可以省略
         * 特殊字符处理：
            1. 转义字符：
            2. CDATA区:
    -->
    <!-- <select id="selectById"  resultMap="brandResultMap">
         select *
         from tb_brand where id = #{id};

     </select>
     -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id
         <![CDATA[
                  =
         ]]>
         #{id};

    </select>

    <!--条件查询-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}

        <!-- #{}中的参数应该：
                    1.与接口中的参数的注解名相同
                    2.与对象的成员变量名相同
                    3.与Map键值名相同
        -->
    </select>

    <select id="selectByCondition1" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
        <!-- #{}中的参数应该：
                    1.与接口中的参数的注解名相同
                    2.与对象的成员变量名相同
                    3.与Map键值名相同
        -->
    </select>

    <!--动态单条件查询-->
    <select id="selectByCondition2" resultMap="brandResultMap">
        <!-- #{}中的参数应该：
                    1.与接口中的参数的注解名相同
                    2.与对象的成员变量名相同
                    3.与Map键值名相同
        -->
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>

        <!--        select *-->
        <!--        from tb_brand-->
        <!--        <where>-->
        <!--            <if test="status != null">-->
        <!--                and status = #{status}-->
        <!--            </if>-->
        <!--            <if test="companyName != null and companyName != '' ">-->
        <!--                and company_name like #{companyName}-->
        <!--            </if>-->
        <!--            <if test="brandName != null and brandName != '' ">-->
        <!--                and brand_name like #{brandName}-->
        <!--            </if>-->
        <!--        </where>-->
    </select>

    <!--useGeneratedKeys="true" keyProperty="id":
    返回主键（id），赋值给实现类brand中的成员变量：id
    使用brand.getId获取id
    -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">

        insert into tb_brand(company_name, brand_name, ordered, description, status)
        values (#{companyName}, #{brandName}, #{ordered}, #{description}, #{status})

    </insert>

    <insert id="add1" useGeneratedKeys="true" keyProperty="brand.id">
        insert into tb_brand(company_name, brand_name, ordered, description, status)
        values (#{brand.companyName}, #{brand.brandName}, #{brand.ordered}, #{brand.description}, #{brand.status})
    </insert>

</mapper>